datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?         @unique
  emailVerified DateTime?
  image         String
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  orders        Orders[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @default(User)
  Library       Library[]
}

enum Role {
  User
  Admin
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Library {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String    @db.ObjectId
  sources   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    LibStatus @default(FINISHED)
  videoIds  String[]  @default([]) @db.ObjectId
  Videos    Video[]   @relation(fields: [videoIds], references: [id])
}

enum LibStatus {
  NOT_STARTED
  IN_PROCESS
  FINISHED
}

model Video {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  url          String
  videoId      String // Renamed to avoid confusion with `id`
  length       String
  milisLength  Int // Use Int for numeric fields
  thumbnailUrl String // Use camelCase for consistency
  author       Author // Embedded type for author
  subtitles    Subtitle[] // Array of embedded Subtitle objects

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  libraryIDs String[]  @default([]) @db.ObjectId
  Library    Library[] @relation(fields: [libraryIDs], references: [id])

  @@index([title])
  @@index([author.name])
  @@index([subtitles.text], name: "SubtitlesTextIndex")
}

// Define an embedded type for Author
type Author {
  name String
  url  String
}

type Subtitle {
  start     String
  dur       String
  text      String
  wordIndex Int
}

model Orders {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentPlan PaymentLength
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum PaymentLength {
  WEEK
  MONTH
}

// Define Thumbnail as a type
// type Thumbnail {
//   url    String
//   height Int
//   width  Int
// }

//! NOT IN USE
// Those are always empty - no clue why
// But not a problem because everything works
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
