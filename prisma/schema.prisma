datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  orders        Orders[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @default(USER)
  userType      UserType        @default(BASIC)
  Library       Library[]
}

enum UserType {
  NONE
  BASIC
  PREMIUM
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Library {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String         @db.ObjectId
  sources     String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      LibStatus      @default(IN_PROCESS)
  videoIds    String[]       @unique @default([]) @db.ObjectId
  Videos      Video[]        @relation(fields: [videoIds], references: [id])
  visibility  visibilityEnum @default(PRIVATE)
  uniqueViews String[]       @db.ObjectId
}

enum visibilityEnum {
  PRIVATE
  PUBLIC
}

enum LibStatus {
  NOT_STARTED
  IN_PROCESS
  FINISHED
}

enum VideoStatus {
  FINISHED
  IN_PROCESS
  NO_SUBS
}

model Video {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  url          String
  videoId      String // Renamed to avoid confusion with `id`
  length       String
  milisLength  Int // Use Int for numeric fields
  thumbnailUrl String // Use camelCase for consistency
  author       Author // Embedded type for author
  subtitles    Subtitle[] // Array of embedded Subtitle objects
  status       VideoStatus @default(IN_PROCESS)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  libraryIDs   String[]    @default([]) @db.ObjectId
  Library      Library[]   @relation(fields: [libraryIDs], references: [id])

  @@index([title])
  @@index([author.name])
  @@index([subtitles.text], name: "SubtitlesTextIndex")
}

// Define an embedded type for Author
type Author {
  name String
  url  String
}

type Subtitle {
  start     String
  dur       String
  text      String
  wordIndex Int
}

model Orders {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  boughtType UserType
}

model Features {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  publicDescription String
  developerNote     String?
  stage             FeatureStage @default(IDEA)
  plannedFinish     DateTime?
  upvote            Int          @default(0)
  whoUpvoted        String[]     @default([]) @db.ObjectId
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         String       @db.ObjectId
}

enum FeatureStage {
  IDEA
  IN_PRODUCTION
  FINISHED
}

model Bugs {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serialNumber Int
  content      String
  createdBy    String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  state        BugState @default(NOT_SOLVED)
}

enum BugState {
  NOT_SOLVED
  SOLVED
}

// NOT IN USE
// Those are always empty - no clue why
// But not a problem because everything works
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
