datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?         @unique
  emailVerified DateTime?
  image         String
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @default(User)
  Library   Library[]
}

enum Role {
  User
  Admin
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Library {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String    @db.ObjectId
  sources   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    LibStatus @default(NOT_STARTED)
  videoIds  String[]  @default([]) @db.ObjectId
  Videos    Video[]   @relation(fields: [videoIds], references: [id])
}

enum LibStatus {
  NOT_STARTED
  IN_PROCESS
  FINISHED
}

model Video {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  url              String          @unique
  title            String
  duration         Int?
  thumbnails       Thumbnail[]
  view_count       Int?
  channelName      String?
  channelUrl       String?
  mp3              String?
  transcription    Transcription? // Reference to the Transcription type
  postProcessing   PostProcessing? // Reference to the PostProcessing type
  status           String          @default("fetched")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  postProcessingId String?         @db.ObjectId
  libraryIDs       String[]        @default([]) @db.ObjectId
  Library          Library[]       @relation(fields: [libraryIDs], references: [id])
}

// Define Thumbnail as a type
type Thumbnail {
  url    String
  height Int
  width  Int
}

// Define Transcription as a type
type Transcription {
  videoId   String?  @db.ObjectId
  createdAt DateTime
  updatedAt DateTime
}

// Define PostProcessing as a type
type PostProcessing {
  tags      String[]
  vectors   Float[]
  status    String
  createdAt DateTime
  updatedAt DateTime
}

//! NOT IN USE
// Those are always empty - no clue why
// But not a problem because everything works
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
